{"version":3,"sources":["components/TableCell.jsx","logo.svg","components/TableRow.jsx","components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tablecell","customCell","onClick","changeColor","event","target","style","background","props","color","this","React","Component","Tablerow","col","map","columns","Table","row","rows","App","addRow","state","push","setState","removeRow","pop","buttonClick","userClick","value","console","log","addCol","removeCol","updateColor","column","className","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deca4d5b.chunk.js","sourcesContent":["import React from 'react'\n\nclass Tablecell extends React.Component {\n\n    //creates cell with event handler when clicked\n    customCell = () => {\n        let cell = <td onClick = {this.changeColor}></td>\n        return cell\n    }\n    \n    //changes cell color when clicked\n    changeColor = (event) => {\n        event.target.style.background = this.props.color\n    }\n\n    render() {\n        //returns cell to be added into row\n        return (\n                this.customCell()\n        )\n    }\n}\n\nexport default Tablecell\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport Tablecell from './TableCell'\n\nclass Tablerow extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            //creates row with a number of columns equal to col\n            <div>\n                <tr>\n                    {this.props.col.map((columns) => {\n                        return <Tablecell color = {this.props.color} />\n                    })\n                    }\n                </tr>\n            </div>\n        )\n    }\n}\n\nexport default Tablerow\n","import React from 'react'\nimport Tablerow from './TableRow'\n\nclass Table extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            //creates table with number of rows equal to row\n            <table>\n                {\n                   this.props.row.map((rows) => {\n                        return <Tablerow col = {this.props.col} color = {this.props.color} />\n                    })\n                }\n            </table>\n        )\n    }\n}\n\nexport default Table\n","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './components/Table'\n\nclass App extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      columns: [''],\n      rows: [''],\n      color: ''\n    }\n  }\n\n  //updates number of rows\n  addRow = () => {\n    let row = this.state.rows\n    row.push('')\n    this.setState({rows: row})\n  }\n  removeRow = () => {\n    let row = this.state.rows\n    row.pop('')\n    this.setState({rows: row})\n  }\n\n\n  //this will control grid\n  buttonClick = (event) => {\n    let userClick = event.target.value;\n\n    //checks if add row was clicked\n    if(userClick === \"addRow\"){\n      this.addRow()\n    }\n    else if (userClick === \"removeRow\") {\n      this.removeRow()\n      console.log(\"The user clicked remove row, row has been removed\")\n    }\n\n    //checks if add column was clicked\n    if(userClick === \"addColumn\"){\n      this.addCol()\n    }\n    else if (userClick === \"RemoveColumn\") {\n      this.removeCol()\n      console.log(\"The user clicked add column, column has been removed\")\n    }\n  };\n\n  //updates color when a new color is selected\n  //if choose color is selected, cell color is changed to white when clicked\n  updateColor = (event) => {\n    console.log(event.target.value)\n    this.setState({color: event.target.value})\n  }\n\n  //updates number of columns\n  addCol = () => {\n    let column = this.state.columns\n    column.push('')\n    this.setState({columns: column})\n  }\n  removeCol = () => {\n    let column = this.state.columns\n    column.pop('')\n    this.setState({columns: column})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className = \"container\">\n          <h1>React DOM Challenge</h1>\n        </div>\n        <div className = \"buttonsContainer\">\n          <button value = \"addRow\" onClick = {this.buttonClick}>Add Row</button>\n          <button value = \"removeRow\" onClick = {this.buttonClick}>Remove Row</button>\n          <button value = \"addColumn\" onClick = {this.buttonClick}>Add Column</button>\n          <button value = \"RemoveColumn\" onClick = {this.buttonClick}>Remove Column</button>\n        </div>\n\n        <div className = \"colorsContainer\">\n          <select onChange = {this.updateColor}>\n            <option value = \"white\">Choose Color</option>\n            <option value = \"blue\">Blue</option>\n            <option value = \"green\">Green</option>\n            <option value = \"red\">Red</option>\n            <option value = \"yellow\">Yellow</option>\n            </select>\n        </div>\n        {/*Passes down values from state into child components*/}\n        <Table row = {this.state.rows} col = {this.state.columns} color = {this.state.color} />\n      </div>\n    );\n    }\n  }\n  export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}